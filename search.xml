<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分布式CAP与BASE理论</title>
    <url>/2019/12/01/%E5%88%86%E5%B8%83%E5%BC%8FCAP%E4%B8%8EBASE%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="分布式Base理论"><a href="#分布式Base理论" class="headerlink" title="分布式Base理论"></a>分布式Base理论</h1><p>参考：<br><a href="https://my.oschina.net/foodon/blog/372703" target="_blank" rel="noopener">CAP和BASE理论</a><br><a href="https://juejin.im/post/5d720e86f265da03cc08de74" target="_blank" rel="noopener">https://juejin.im/post/5d720e86f265da03cc08de74</a><br><a href="https://github.com/changmingxie/tcc-transaction" target="_blank" rel="noopener">https://github.com/changmingxie/tcc-transaction</a><br>《从Paxos到Zookeeper》</p>
<h2 id="1-CAP理论"><a href="#1-CAP理论" class="headerlink" title="1. CAP理论"></a>1. CAP理论</h2><p>2000年7月，加州大学伯克利分校的Eric Brewer教授在ACM PODC会议上提出CAP猜想。2年后，麻省理工学院的Seth Gilbert和Nancy Lynch从理论上证明了CAP。之后，CAP理论正式成为分布式计算领域的公认定理。</p>
<p>CAP理论为：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p>
<h3 id="1-1-一致性（Consistency）"><a href="#1-1-一致性（Consistency）" class="headerlink" title="1.1 一致性（Consistency）"></a>1.1 一致性（Consistency）</h3><p>一致性指“all nodes see the same data at the same time”，即更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致。</p>
<h3 id="1-2-可用性（Availability）"><a href="#1-2-可用性（Availability）" class="headerlink" title="1.2 可用性（Availability）"></a>1.2 可用性（Availability）</h3><p>可用性指“Reads and writes always succeed”，即服务一直可用，而且是正常响应时间。</p>
<h3 id="1-3-分区容错性（Partition-tolerance）"><a href="#1-3-分区容错性（Partition-tolerance）" class="headerlink" title="1.3 分区容错性（Partition tolerance）"></a>1.3 分区容错性（Partition tolerance）</h3><p>分区容错性指“the system continues to operate despite arbitrary message loss or failure of part of the system”，即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</p>
<h2 id="2-CAP权衡"><a href="#2-CAP权衡" class="headerlink" title="2. CAP权衡"></a>2. CAP权衡</h2><p>通过CAP理论，我们知道无法同时满足一致性、可用性和分区容错性这三个特性，那要舍弃哪个呢？</p>
<p>对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9，即保证P和A，舍弃C（退而求其次保证最终一致性）。虽然某些地方会影响客户体验，但没达到造成用户流程的严重程度。</p>
<p>对于涉及到钱财这样不能有一丝让步的场景，C必须保证。网络发生故障宁可停止服务，这是保证CA，舍弃P。貌似这几年国内银行业发生了不下10起事故，但影响面不大，报到也不多，广大群众知道的少。还有一种是保证CP，舍弃A。例如网络故障事只读不写。</p>
<p>孰优孰略，没有定论，只能根据场景定夺，适合的才是最好的。</p>
<p>需要明确的一点是，对于一个分布式系统而言，分区容错性可以说是一个基本的要求。很简单，既然是分布式系统，则系统上的组件必然部署到不同的节点，必然出现子网络。</p>
<h2 id="3-BASE理论"><a href="#3-BASE理论" class="headerlink" title="3. BASE理论"></a>3. BASE理论</h2><p>Basical Available（基本可用）、Soft state（软状态）、Eventually consistent（最终一致性）</p>
<p>eBay的架构师Dan Pritchett源于对大规模分布式系统的实践总结，在ACM上发表文章提出BASE理论，BASE理论是对CAP理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。</p>
<p>BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。</p>
<h3 id="3-1-基本可用（Basically-Available）"><a href="#3-1-基本可用（Basically-Available）" class="headerlink" title="3.1 基本可用（Basically Available）"></a>3.1 基本可用（Basically Available）</h3><p>基本可用是指分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。<br>电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。这就是损失部分可用性的体现。</p>
<p>两个体现：</p>
<ol>
<li>响应时间上的损失；更长了</li>
<li>功能上的损失；降级页面</li>
</ol>
<h3 id="3-2-软状态（-Soft-State）"><a href="#3-2-软状态（-Soft-State）" class="headerlink" title="3.2 软状态（ Soft State）"></a>3.2 软状态（ Soft State）</h3><p>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。认为该中间状态不会影响系统的整体可用性。</p>
<h3 id="3-3-最终一致性（-Eventual-Consistency）"><a href="#3-3-最终一致性（-Eventual-Consistency）" class="headerlink" title="3.3 最终一致性（ Eventual Consistency）"></a>3.3 最终一致性（ Eventual Consistency）</h3><p>最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</p>
<h2 id="4-ACID和BASE的区别与联系"><a href="#4-ACID和BASE的区别与联系" class="headerlink" title="4. ACID和BASE的区别与联系"></a>4. ACID和BASE的区别与联系</h2><p>ACID是传统数据库常用的设计理念，追求强一致性模型。BASE支持的是大型分布式系统，提出通过牺牲强一致性获得高可用性。</p>
<p>在分布式系统设计的场景中，系统组件对一致性要求是不同的，因此ACID和BASE又会结合使用。</p>
]]></content>
      <categories>
        <category>分布式 事务</category>
      </categories>
  </entry>
  <entry>
    <title>冰雪奇缘2</title>
    <url>/2019/12/01/%E5%86%B0%E9%9B%AA%E5%A5%87%E7%BC%982/</url>
    <content><![CDATA[<h1 id="《冰雪奇缘2》"><a href="#《冰雪奇缘2》" class="headerlink" title="《冰雪奇缘2》"></a>《冰雪奇缘2》</h1><p>2019-11-23</p>
<p>在东湖渠华谊电影院。</p>
<p>9.0分。唯美公主梦</p>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
  </entry>
  <entry>
    <title>2019年冬第一场雪</title>
    <url>/2019/12/01/2019%E5%B9%B4%E5%86%AC%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%9B%AA/</url>
    <content><![CDATA[<p>雪：<br><img src="https://tva1.sinaimg.cn/large/9ea5011cly1g9hbzbztejj219i0pk7aq.jpg" alt="WechatIMG294"></p>
<p>晚霞：<br><img src="https://tvax3.sinaimg.cn/large/9ea5011cly1g9hby9depaj23402c0e81.jpg" alt="y5Jc3SqPTNGGE34sox59dA"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>雪</tag>
      </tags>
  </entry>
  <entry>
    <title>哆啦A梦伴我同行</title>
    <url>/2019/12/01/%E5%93%86%E5%95%A6A%E6%A2%A6%E4%BC%B4%E6%88%91%E5%90%8C%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="《哆啦A梦伴我同行》"><a href="#《哆啦A梦伴我同行》" class="headerlink" title="《哆啦A梦伴我同行》"></a>《哆啦A梦伴我同行》</h1><p>7.5</p>
<p>剧情较为单一。</p>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo、githubPages搭建博客</title>
    <url>/2019/12/01/%E4%BD%BF%E7%94%A8Hexo%E3%80%81githubPages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="使用hexo、github-Pages搭建博客"><a href="#使用hexo、github-Pages搭建博客" class="headerlink" title="使用hexo、github Pages搭建博客"></a>使用hexo、github Pages搭建博客</h1><h2 id="1-安装node"><a href="#1-安装node" class="headerlink" title="1. 安装node"></a>1. 安装node</h2><p>如果本机已经有node，为避免安装出现问题，建议先升级到最新版。参考：<a href="https://juejin.im/post/5b9739d1e51d450e9f66ee3b" target="_blank" rel="noopener">https://juejin.im/post/5b9739d1e51d450e9f66ee3b</a></p>
<h2 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h2><p>参考：<a href="https://segmentfault.com/a/1190000017986794" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017986794</a></p>
<p>里面有图床、主题、评论配置。</p>
<h2 id="3-主题配置"><a href="#3-主题配置" class="headerlink" title="3. 主题配置"></a>3. 主题配置</h2><p>主题使用next的Pisces，具体可Google。</p>
<p>其中，原生的这个主题两边留白太多，现在很多都是宽屏，包括本人很喜欢宽屏展示。可以参考：调节next主题宽度 <a href="https://zuiyu1818.cn/posts/NexT_codewidth.html" target="_blank" rel="noopener">https://zuiyu1818.cn/posts/NexT_codewidth.html</a></p>
]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>工具 个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Java泛型</title>
    <url>/2019/12/01/Java%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h1><p>泛型：<a href="https://blog.csdn.net/briblue/article/details/76736356" target="_blank" rel="noopener">https://blog.csdn.net/briblue/article/details/76736356</a><br>《Effective Java中文版》<br>上下限通配符：<a href="https://www.cnblogs.com/alsf/p/5690052.html" target="_blank" rel="noopener">https://www.cnblogs.com/alsf/p/5690052.html</a> </p>
<h2 id="1-泛型类型"><a href="#1-泛型类型" class="headerlink" title="1. 泛型类型"></a>1. 泛型类型</h2><ol>
<li>泛型类。</li>
<li>泛型方法。</li>
<li>泛型接口。</li>
</ol>
<h2 id="2-原生态类型"><a href="#2-原生态类型" class="headerlink" title="2. 原生态类型"></a>2. 原生态类型</h2><p>List list = new ArrayList&lt;&gt;(); 就是原生态类型</p>
<h2 id="3-类型参数"><a href="#3-类型参数" class="headerlink" title="3. 类型参数"></a>3. 类型参数</h2><p>实例化、定义方法、定义接口的时候，传入的类型参数，一般用大写的字母表示；</p>
<p>List<E> {</p>
<p>}</p>
<h2 id="4-类型擦除"><a href="#4-类型擦除" class="headerlink" title="4. 类型擦除"></a>4. 类型擦除</h2><p>擦除就是使泛型可以与没有使用泛型的代码随意进行互用。</p>
<p>创建泛型、参数化类型或者类型参数的数组是非法的：</p>
<p>new List<E>[];<br>new List<String>[];<br>new E[];</p>
<p>都是非法的。</p>
<h2 id="5-通配符"><a href="#5-通配符" class="headerlink" title="5. 通配符"></a>5. 通配符</h2><p>除了用 <T>表示泛型外，还有 &lt;?&gt;这种形式。？ 被称为通配符。</p>
<p>Sub 是 Base 的子类，不代表 List<Sub>和 List<Base>有继承关系。<br>通配符的出现是为了指定泛型中的类型范围。</p>
<p>通配符有 3 种形式：</p>
<ol>
<li>&lt;?&gt;被称作无限定的通配符。</li>
<li>&lt;? extends T&gt;被称作有上限的通配符。</li>
<li>&lt;? super T&gt;被称作有下限的通配符。</li>
</ol>
<h3 id="5-1-无限定通配符"><a href="#5-1-无限定通配符" class="headerlink" title="5.1 无限定通配符"></a>5.1 无限定通配符</h3><p>如果使用“？“接收泛型对象的时候，则不能设置被泛型指定的内容。</p>
<h3 id="5-2-有上限通配符"><a href="#5-2-有上限通配符" class="headerlink" title="5.2 有上限通配符"></a>5.2 有上限通配符</h3><p>函数参数List&lt;? extends Parent&gt;，则传入参数的时候必须传入List<Parent>实例或者List&lt;Parent子类&gt;的实例。</p>
<h3 id="5-3-有下限通配符"><a href="#5-3-有下限通配符" class="headerlink" title="5.3 有下限通配符"></a>5.3 有下限通配符</h3><p>函数参数List&lt;? extends Sub&gt;，则传入参数的时候必须传入List<Sub>实例或者List&lt;Sub父类&gt;的实例。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java 泛型</tag>
      </tags>
  </entry>
</search>
